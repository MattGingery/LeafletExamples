<html>
<head>
  <title>Leaflet Part5 - WKT</title>
  <meta charset="UTF-8"> 
  <link rel="stylesheet" href="https://unpkg.com/leaflet@0.7.3/dist/leaflet.css"/>
  <script                 src="https://unpkg.com/leaflet@0.7.3/dist/leaflet.js"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css"/>
  <script                 src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
  <script src="https://arthur-e.github.io/Wicket/wicket.js" type="text/javascript"></script>
  <script src="https://arthur-e.github.io/Wicket/wicket-leaflet.js" type="text/javascript"></script>  
  <style>
	#content {
	  width: 100%;
	  overflow: hidden;
	}

	#searchDiv {
	  display: none;
	  float: left;
	}

	#map {
	  width: 100%;
	  height: 95%;
	  float: right;
	}
  </style>  
</head>
<body>
<div id="toolbar">
  <input type="button" id="searchButton" accesskey="S" title="Click or use Alt-S to hide/show the search page" value="Show Search" />
</div>
<div id="content">
  <div id="searchDiv">
    <table id="searchTable" class="display" width="100%"></table>
  </div>
  <div id="map"></div>
</div>
<script>
var lfmap;
var mapObjects = [];
var colorIndex = -1;
var dataSet = [];
var searchShown = false;
var drawnObjTypes = {};

$(document).ready(function() {

  drawMap(39.82835, -98.5816684, 5); // The Geographic Center of the United States
  $('#searchDiv').hide();

  var table = $('#searchTable').DataTable({
    data: dataSet,
    pageLength: 15,
    pagingType: 'simple',
    bLengthChange: false,
    columns: [{
        title: ''
      },
      {
        title: ''
      }
    ],
    columnDefs: [{
      targets: 1,
      visible: false
    }]
  });


  $('#searchTable tbody').on('click', 'tr', function() {
    var index = table.row(this).data()[1] - 1;
    displayMapObject(index);
  });

  $('#searchButton').click(function() {
    searchShown = !searchShown;
    if (searchShown) {
      $('#searchButton').val('Hide Search');
      $('#map').width('76%');
      $('#searchDiv').width('20%');
      zoomToMapObjects(mapObjects);
    } else {
      $('#searchButton').val('Show Search');
      $('#map').width('100%');
    }

    $('#searchDiv').toggle();
  });
});

// Use this to get the array of Well Known Text (WKT) you wish to display.  
// This is where you should retrieve shape data from your middle-tier application.
// Each item must contain a WKT or GeoJSON string as the first item.  Supports Polygon, 
// Linestring, Point, and 'Multi' version of each.   
// Optional items: 
// short title of the shape, additional html to display on popup, color.	
function getWKT() {
  var data = getGridWKT(32.820000, -117.255000, 0.01000, 0.008000, 2, 2); // list of test shapes

  data.push(['POLYGON (( -117.200000 32.800000,  -117.230000 32.800000,  -117.230000 32.850000,  -117.200000 32.850000))']);
  data.push(['POLYGON (( -117.150000 32.800000,  -117.160000 32.800000,  -117.160000 32.850000,  -117.150000 32.850000))']);
  data.push(['POLYGON (( -117.180000 32.800000,  -117.190000 32.800000,  -117.180000 32.850000))']);
  data.push(['MULTIPOLYGON ((( -117.170000 32.860000,  -117.190000 32.860000,  -117.190000 32.880000,  -117.170000 32.880000)))']);
  data.push(['POINT ( -117.210000 32.790000)']);
  data.push(['LINESTRING ( -117.295000 32.825000, -117.296000 32.836000 , -117.23000 32.857000 )']);
  data.push(['LINESTRING ( -117.205000 32.825000, -117.216000 32.846500 , -117.23000 32.887800 )']);
  data.push(['LINESTRING ( -117.250000 32.825000, -117.296000 32.826600 , -117.23000 32.860500 )']);
  data.push(['{"coordinates": [[[-117.244066, 32.802077],[-117.241716, 32.802555],[-117.241169, 32.800715],[-117.243638,32.800225]]], "type": "Polygon"}',
    'PB Middle School'
  ]);

  if (data == null) {
    return [];
  } else {
    return data;
  }
}

// Basic map instantiation.  Can also use other sources besides OpenStreetMaps - 
// you should get the tileLayer urlTemplate and options from  
// your middle-tier application which should store that data in a config file. 
function drawMap(centerLat, centerLong, zoomLevel) {
  try {

    var mapCenter = [centerLat, centerLong];

    lfmap = L.map('map').setView(mapCenter, zoomLevel);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(lfmap);

    drawLayers(lfmap);
  } catch (e) {
    alert("Error drawing map objects: " + e.message);
  }
}

// Iterates through geo objects, assigns default values, and draws them.
function drawLayers() {
  var wkt = new Wkt.Wkt();
  var shapes = getWKT();

  for (var index = 0; index < shapes.length; index++) {
    var shape = shapes[index];
    wkt.read(shape[0]);
    var title = formatTitle(wkt.type, shape);
    var details = (shape.length > 2 && shape[2] != null) ?
      shape[2] : '';
    var fillColor = (shape.length > 3 && shape[3] != null) ?
      shape[3] : getColorRotation();

    var formatPopupHtml = formatPopupText(title, details, index);
    var obj = wkt.toObject({
      color: fillColor
    });
    obj.addTo(lfmap).bindPopup(formatPopupHtml);
    mapObjects.push(obj);
    dataSet.push([title, index + 1])
  };

  zoomToMapObjects(mapObjects);
}

// Use this to format the default "Title" of the object however you want.
// My code keeps a count of each different type of shape 
// (polygon, point, lingstring) shown and increments the # of each one of them.
function formatTitle(wktType, shape) {
  wktType = wktType.replace('multi', ''); // for the title, user doesn't care if "multi" or not.
  wktType = wktType.replace('linestring', 'Line');
  if (shape.length > 1 && shape[1] != null) {
    return shape[1];
  } else if (!drawnObjTypes.hasOwnProperty(wktType)) {
    drawnObjTypes[wktType] = 1;
  } else {
    drawnObjTypes[wktType] += 1;
  }

  return wktType.charAt(0).toUpperCase() + wktType.substr(1).toLowerCase() +
    ' #' + ('    ' + (drawnObjTypes[wktType])).slice(-5);
}

function formatPopupText(title, details, mapObjectsIndex) {
  return '<b>' + title + '</b><br />' + details +
    '<br /><hr /><a href="javascript:void(0)" onclick="zoomToMapObject(' +
    mapObjectsIndex + ')" accesskey="Z" title="Click or use Alt-Z to zoom to this location">Zoom To</a>';
}

// Zooms to a mapObject by index, 
// then shows the object's PopUp in the center of the object.
// obj.openPopup() without LatLng shows the PopUp in the first corner of the shape.
// Note that in some odd shapes such as a PolyLine or a "C"-shaped Polygon,
// the center where the PopUp will display will not actually be on the object.
function displayMapObject(mapObjectsIndex) {
  zoomToMapObject(mapObjectsIndex);
  var obj = mapObjects[mapObjectsIndex];
  var group = new L.featureGroup([obj]);
  obj.openPopup(group.getBounds().getCenter());
}

function zoomToMapObject(mapObjectsIndex) {
  zoomToMapObjects([mapObjects[mapObjectsIndex]]);
}

function zoomToMapObjects(objects) {
  var group = new L.featureGroup(objects);

  lfmap.fitBounds(group.getBounds());
}

function getColorRotation() {
  var colorList = ['blue', 'red', 'purple', 'orange'];
  colorIndex++;
  if (colorIndex >= colorList.length) {
    colorIndex = 0;
  }
  return colorList[colorIndex];
}

// test functions.  Used to draw many map objects for your tests.
function getRectangleCoordsWKT(latLeft, lngTop, degreesWidth, degreesHeight) {
  var wktText = 'POLYGON(( ' +
    (lngTop) + ' ' + (latLeft) + ', ' +
    (lngTop) + ' ' + (latLeft - degreesHeight) + ', ' +
    (lngTop + degreesWidth) + ' ' + (latLeft - degreesHeight) + ', ' +
    (lngTop + degreesWidth) + ' ' + (latLeft) +
    '))';

  return wktText;
}

function getGridWKT(latLeft, lngTop, degreesWidth, degreesHeight, nbrColumns, nbrRows) {
  var data = [];
  for (var x = 0; x < nbrRows; x++) {
    for (var y = 0; y < nbrColumns; y++) {
      data.push([getRectangleCoordsWKT(latLeft + (-1 * x * degreesHeight),
        lngTop + (y * degreesWidth), degreesWidth, degreesHeight)]);
    }
  }

  return data;
}


</script>
</body>
</html>
</html>